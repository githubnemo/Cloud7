# Building node-dht

The journey of building node-dht (https://github.com/tilgovi/node-dht)[https://github.com/tilgovi/node-dht] for nodejs 0.4.5.

## Dependencies

libev
libboost-dev
libssl-dev
libcage
nodejs

## Building

### libev

#### using nodejs' libevent

first, modify libev.source in the libev wscript so it looks like this:

	libev.source = ['ev.c','event.c']

one has to compile node's libev with -fPIC:

	$ CXXFLAGS="-fPIC" CFLAGS="-fPIC" python tools/waf-light --product-type=deps/libev/ clean configure build

then build libcage.

#### building from source

Check out http://software.schmorp.de/pkg/libev.html

### libcage

#### without node's libev

	omake CXXFLAGS=-I$PWD/libev/ LDFLAGS=-L$PWD/libev/.libs EV=yes

#### with node's libev

first uncomment the line

	LDFLAGS += -lev

in OMakefile (line ~37), then run

$ omake CXXFLAGS="-I/home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/deps/libev/ -fPIC" LDFLAGS="/home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/build/default/deps/libev/ev_1.o /home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/build/default/deps/libev/event_1.o" EV=TRUE


### node-dht
compiles soooo far:

	[1/2] cxx: dht.cc -> build/default/dht_1.o
	../dht.cc: In static member function ‘static v8::Handle<v8::Value> node_dht::DHT::Put(const v8::Arguments&)’:
	../dht.cc:203:23: error: ‘class node::Buffer’ has no member named ‘data’
	../dht.cc:203:36: error: ‘class node::Buffer’ has no member named ‘length’
	../dht.cc:204:25: error: ‘class node::Buffer’ has no member named ‘data’
	../dht.cc:204:40: error: ‘class node::Buffer’ has no member named ‘length’
	../dht.cc: In static member function ‘static v8::Handle<v8::Value> node_dht::DHT::Get(const v8::Arguments&)’:
	../dht.cc:232:26: error: ‘class node::Buffer’ has no member named ‘data’
	../dht.cc:232:42: error: ‘class node::Buffer’ has no member named ‘length’
	../dht.cc: In static member function ‘static v8::Handle<v8::Value> node_dht::DHT::FillGetBuffers(const v8::Arguments&)’:
	../dht.cc:254:19: error: ‘class node::Buffer’ has no member named ‘data’
	../dht.cc:254:49: error: ‘class node::Buffer’ has no member named ‘length’
	../dht.cc: In static member function ‘static v8::Handle<v8::Value> node_dht::DHT::SendDgram(const v8::Arguments&)’:
	../dht.cc:313:31: error: ‘class node::Buffer’ has no member named ‘data’
	../dht.cc:313:45: error: ‘class node::Buffer’ has no member named ‘length’
	../dht.cc: In member function ‘void node_dht::DHT::dgram_func::operator()(void*, size_t, uint8_t*)’:
	../dht.cc:379:18: error: ‘class node::Buffer’ has no member named ‘data’
	Waf: Leaving directory `/home/nemo/Code/Cloud7/core/lib/peers/node-dht/build'
	Build failed:  -> task failed (err #1):
		{task: cxx dht.cc -> dht_1.o}

The following patch resolves the errors:

	diff --git a/dht.cc b/dht.cc
	index 6d544e0..5a5da72 100644
	--- a/dht.cc
	+++ b/dht.cc
	@@ -200,8 +200,8 @@ Handle<Value> DHT::Put(const Arguments& args) {
	   bool hasUnique = hasOptional && optCorrectType;
	   bool isUnique = hasUnique ? args[3]->ToBoolean()->Value() : false;

	-  dht->cage->put(key->data(), key->length(),
	-                 value->data(), value->length(), ttl, isUnique);
	+  dht->cage->put(Buffer::Data(key), Buffer::Length(key),
	+                 Buffer::Data(value), Buffer::Length(value), ttl, isUnique);

	   return args.This();
	 }
	@@ -229,7 +229,7 @@ Handle<Value> DHT::Get(const Arguments& args) {

	   // -> into libcage ->
	   dht->Ref();
	-  dht->cage->get(buffer->data(), buffer->length(), dht->get_fn);
	+  dht->cage->get(Buffer::Data(buffer), Buffer::Length(buffer), dht->get_fn);

	   return args.This();
	 }
	@@ -244,14 +244,14 @@ Handle<Value> DHT::FillGetBuffers(const Arguments& args) {

	   Local<Array> ar = args[0].As<Array>();
	   int n = ar->Length();
	-
	+
	   // Unwrap each Buffer contained in the array and fill in data
	   // from the ready and willing storedBuffers.
	   if (n) {
		 libcage::dht::value_set::iterator it = dht->storedBuffers->begin();
		 for (int i = 0; i < n && it != dht->storedBuffers->end(); ++it, i++) {
		   Buffer * buf = ObjectWrap::Unwrap<Buffer>(ar->Get(i).As<Object>());
	-      memcpy(buf->data(), it->value.get(), buf->length());
	+      memcpy(Buffer::Data(buf), it->value.get(), Buffer::Length(buf));
		 }
	   }

	@@ -310,7 +310,7 @@ Handle<Value> DHT::SendDgram(const Arguments& args) {
	   uint8_t id[CAGE_ID_LEN];
	   StringToId(args[0].As<String>(), id);

	-  dht->cage->send_dgram(data->data(), data->length(), id);
	+  dht->cage->send_dgram(Buffer::Data(data), Buffer::Length(data), id);

	   return args.This();
	 }
	@@ -376,8 +376,8 @@ void DHT::dgram_func::operator() (void* buf, size_t len, uint8_t* id) {

	   Buffer * buffer = Buffer::New(len);

	-  memcpy(buffer->data(), buf, len);
	-
	+  memcpy(Buffer::Data(buffer), buf, len);
	+
	   Handle<Value> argv[2];
	   argv[0] = buffer->handle_;
	   argv[1] = IdToString(id);


WAF is outdated, too. It doesn't read LINKFLAGS from the environment. If you use it, apply this patch to node's WAF:

	--- node-v0.4.5/tools/wafadmin/Tools/gxx.py	2011-05-11 17:21:02.302735539 +0200
	+++ node-v0.4.5/tools/wafadmin/Tools/gxx.py	2011-05-11 17:21:11.142735543 +0200
	@@ -131,4 +131,5 @@ def detect(conf):
		conf.gxx_modifier_platform()
		conf.cxx_load_tools()
		conf.cxx_add_flags()
	+	conf.link_add_flags()


Finally the following command line worked for me building node-dht:

	$ CXXFLAGS="-I/home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/deps/libeio/ -I/home/nemo/Code/Cloud7/core/lib/peers/libcage/libev/ -I/home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/deps/v8/include/ -I$PWD/../libcage/include" LINKFLAGS="-L$PWD/../libcage/src/" node-waf configure build -v

or the following if you're using node's libev:

	$ CXXFLAGS="-I/home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/deps/libeio/ -I/home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/deps/libev -I/home/nemo/Code/Cloud7/tools/nodejs/node-v0.4.5/deps/v8/include/ -I$PWD/../libcage/include" LINKFLAGS="-L$PWD/../libcage/src/" node-waf configure build

and

	$ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./peers/libcage/src/:./peers/libcage/libev/.libs/ ../../tools/nodejs/node-v0.4.5/node

runs it.
