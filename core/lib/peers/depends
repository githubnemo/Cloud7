# Building node-dht

The journey of building node-dht (https://github.com/tilgovi/node-dht)[https://github.com/tilgovi/node-dht] for nodejs 0.4.5.
It's strongly recommended that you use (https://github.com/githubnemo/node-dht)[https://github.com/githubnemo/node-dht]
instead of the origin repository.

In the following text, `$NODEDIR` is set to the place where the nodejs package lies.
Example:

	$ cd ~/Downloads/
    $ tar -xvjf node-v0.4.5.tar.gz
	$ NODEDIR=$PWD/node-v0.4.5

So the `$NODEDIR` in this case is `~/Downloads/node-v0.4.5`.

Same goes for `$LIBCAGEDIR` which represents the directory of libcage.

## Dependencies

- libev
- libboost-dev
- libssl-dev
- libcage
- nodejs

## Building

### libev

#### using nodejs' libevent

This assumes, one is using the libev nodejs is using.
First, modify libev.source in the libev wscript so it looks like this:

	libev.source = ['ev.c','event.c']

You can find the wscript in

    $NODEDIR/deps/libev

one has to compile node's libev with -fPIC so we can add those object files later to libcage:

	$ CXXFLAGS="-fPIC" CFLAGS="-fPIC" python tools/waf-light --product-type=deps/libev/ clean configure build

then build libcage.

#### building from source

Check out (http://software.schmorp.de/pkg/libev.html)[http://software.schmorp.de/pkg/libev.html].

### libcage

#### without node's libev

	omake CXXFLAGS=-I$PWD/libev/ LDFLAGS=-L$PWD/libev/.libs EV=yes

#### with node's libev

first comment the line

	LDFLAGS += -lev

in OMakefile (line ~37), then run

    $ omake CXXFLAGS="-I$NODEDIR/deps/libev/ -fPIC" LDFLAGS="$NODEDIR/build/default/deps/libev/ev_1.o $NODEDIR/build/default/deps/libev/event_1.o" EV=TRUE


### node-dht

Patch nodejs' WAF: It doesn't read LINKFLAGS from the environment.
Apply this patch to node's WAF:

	--- node-v0.4.5/tools/wafadmin/Tools/gxx.py	2011-05-11 17:21:02.302735539 +0200
	+++ node-v0.4.5/tools/wafadmin/Tools/gxx.py	2011-05-11 17:21:11.142735543 +0200
	@@ -131,4 +131,5 @@ def detect(conf):
		conf.gxx_modifier_platform()
		conf.cxx_load_tools()
		conf.cxx_add_flags()
	+	conf.link_add_flags()


Note: for building with node-waf one needs to set
Note: this is only necessary if you didn't install node globally

- PATH to $NODEDIR/tools
- PYTHONPATH=$NODEDIR/tools/wafadmin/:$NODEDIR/tools/wafadmin/Tools
- PREFIX_NODE=$NODEDIR

Also you want to create a symlink

	$NODEDIR/include/node -> $NODEDIR/src

And change some lines in `$NODEDIR/tools/node-waf`

	prefix = os.getenv('PREFIX_NODE') or join(bindir, "..")
	wafdir = os.getenv('PREFIX_NODE') and join(prefix, 'tools') or join(prefix, "lib", "node")

Finally the following command line worked for me building node-dht:

	$ CXXFLAGS="-I$NODEDIR/deps/libeio/ -I$LIBEVDIR/libev/ -I$NODEDIR/deps/v8/include/ -I$LIBCAGEDIR/include" LINKFLAGS="-L$LIBCAGEDIR/src/" node-waf configure build -v

or the following if you're using node's libev:

	$ CXXFLAGS="-I$NODEDIR/deps/libeio/ -I$NODEDIR/deps/libev -I$NODEDIR/deps/v8/include/ -I$PWD/../libcage/include" LINKFLAGS="-L$LIBCAGEDIR/src/" node-waf configure build


To run nodejs without nodejs' libev enter:

	$ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$LIBCAGEDIR/src/:$LIBEVDIR/.libs/ $NODEDIR/node

If compiled with nodejs' libev:

	$ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$LIBCAGEDIR/src/ $NODEDIR/node
